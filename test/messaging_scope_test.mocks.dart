// Mocks generated by Mockito 5.3.2 from annotations
// in messaging_flutter/test/messaging_scope_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:messaging/src/common/iterable_wrapper.dart' as _i2;
import 'package:messaging/src/common/log.dart' as _i3;
import 'package:messaging/src/common/message.dart' as _i9;
import 'package:messaging/src/guards/messaging_guard.dart' as _i7;
import 'package:messaging/src/messaging.dart' as _i6;
import 'package:messaging/src/observers/messaging_observer.dart' as _i8;
import 'package:messaging/src/queues/messaging_queue.dart' as _i4;
import 'package:messaging/src/stores/messaging_store.dart' as _i5;
import 'package:messaging/src/subscribers/messaging_subscriber.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIterableWrapper_0<T> extends _i1.SmartFake
    implements _i2.IterableWrapper<T> {
  _FakeIterableWrapper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeToggableLog_1 extends _i1.SmartFake implements _i3.ToggableLog {
  _FakeToggableLog_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessageQueue_2 extends _i1.SmartFake implements _i4.MessageQueue {
  _FakeMessageQueue_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessageStore_3 extends _i1.SmartFake implements _i5.MessageStore {
  _FakeMessageStore_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePublishResult_4 extends _i1.SmartFake implements _i6.PublishResult {
  _FakePublishResult_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Messaging].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessaging extends _i1.Mock implements _i6.Messaging {
  @override
  _i2.IterableWrapper<_i7.MessagingGuard> get guards => (super.noSuchMethod(
        Invocation.getter(#guards),
        returnValue: _FakeIterableWrapper_0<_i7.MessagingGuard>(
          this,
          Invocation.getter(#guards),
        ),
        returnValueForMissingStub: _FakeIterableWrapper_0<_i7.MessagingGuard>(
          this,
          Invocation.getter(#guards),
        ),
      ) as _i2.IterableWrapper<_i7.MessagingGuard>);
  @override
  _i3.ToggableLog get log => (super.noSuchMethod(
        Invocation.getter(#log),
        returnValue: _FakeToggableLog_1(
          this,
          Invocation.getter(#log),
        ),
        returnValueForMissingStub: _FakeToggableLog_1(
          this,
          Invocation.getter(#log),
        ),
      ) as _i3.ToggableLog);
  @override
  _i2.IterableWrapper<_i8.MessagingObserver> get observers =>
      (super.noSuchMethod(
        Invocation.getter(#observers),
        returnValue: _FakeIterableWrapper_0<_i8.MessagingObserver>(
          this,
          Invocation.getter(#observers),
        ),
        returnValueForMissingStub:
            _FakeIterableWrapper_0<_i8.MessagingObserver>(
          this,
          Invocation.getter(#observers),
        ),
      ) as _i2.IterableWrapper<_i8.MessagingObserver>);
  @override
  _i4.MessageQueue get queue => (super.noSuchMethod(
        Invocation.getter(#queue),
        returnValue: _FakeMessageQueue_2(
          this,
          Invocation.getter(#queue),
        ),
        returnValueForMissingStub: _FakeMessageQueue_2(
          this,
          Invocation.getter(#queue),
        ),
      ) as _i4.MessageQueue);
  @override
  bool get stopped => (super.noSuchMethod(
        Invocation.getter(#stopped),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.MessageStore get store => (super.noSuchMethod(
        Invocation.getter(#store),
        returnValue: _FakeMessageStore_3(
          this,
          Invocation.getter(#store),
        ),
        returnValueForMissingStub: _FakeMessageStore_3(
          this,
          Invocation.getter(#store),
        ),
      ) as _i5.MessageStore);
  @override
  void pause() => super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.PublishResult publish(_i9.Message? message) => (super.noSuchMethod(
        Invocation.method(
          #publish,
          [message],
        ),
        returnValue: _FakePublishResult_4(
          this,
          Invocation.method(
            #publish,
            [message],
          ),
        ),
        returnValueForMissingStub: _FakePublishResult_4(
          this,
          Invocation.method(
            #publish,
            [message],
          ),
        ),
      ) as _i6.PublishResult);
  @override
  _i10.Future<_i6.PublishResult> publishNow(
    _i9.Message? message, {
    _i6.PublishNowErrorHandlingStrategy? strategy =
        _i6.PublishNowErrorHandlingStrategy.continueDispatch,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishNow,
          [message],
          {#strategy: strategy},
        ),
        returnValue: _i10.Future<_i6.PublishResult>.value(_FakePublishResult_4(
          this,
          Invocation.method(
            #publishNow,
            [message],
            {#strategy: strategy},
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.PublishResult>.value(_FakePublishResult_4(
          this,
          Invocation.method(
            #publishNow,
            [message],
            {#strategy: strategy},
          ),
        )),
      ) as _i10.Future<_i6.PublishResult>);
  @override
  void resume() => super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<void> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void subscribe(
    _i11.MessagingSubscriber? subscriber, {
    required Type? to,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [subscriber],
          {#to: to},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void subscribeAll(
    _i11.MessagingSubscriber? subscriber, {
    required Iterable<Type>? to,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #subscribeAll,
          [subscriber],
          {#to: to},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void unsubscribe(
    _i11.MessagingSubscriber? subscriber, {
    required Type? to,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [subscriber],
          {#to: to},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void unsubscribeAll(_i11.MessagingSubscriber? subscriber) =>
      super.noSuchMethod(
        Invocation.method(
          #unsubscribeAll,
          [subscriber],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Message].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessage extends _i1.Mock implements _i9.Message {
  @override
  int get priority => (super.noSuchMethod(
        Invocation.getter(#priority),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}
